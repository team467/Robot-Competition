// Needed for getting the right GUI libraries 
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
  }
}

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
}

apply plugin: 'com.google.osdetector'
ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
  jcenter()
  mavenCentral()
  google()
  gradlePluginPortal()
  maven { url "https://jitpack.io" } // Allows the addition of Github projects as dependencies
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile 'junit:junit:4.12'

  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
  compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
  // https://mvnrepository.com/artifact/com.fasterxml.jackson.core
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.7'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.7'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'
  compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.7'

  // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
  compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

  // https://mvnrepository.com/artifact/org.openjfx/javafx
  // compile group: 'org.openjfx', name: 'javafx-base', version: '11'
  // compile group: 'org.openjfx', name: 'javafx-graphics', version: '11'
  // compile group: 'org.openjfx', name: 'javafx-controls', version: '11'
  // compile group: 'org.openjfx', name: 'javafx-fxml', version: '11'
  compile "org.openjfx:javafx-base:11:$platform"
  compile "org.openjfx:javafx-graphics:11:$platform"
  compile "org.openjfx:javafx-controls:11:$platform"
  compile "org.openjfx:javafx-fxml:11:$platform"

  compile 'com.github.sh0nk:matplotlib4j:0.4.0'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat "full"
    events "started", "skipped", "passed", "failed"
    showStandardStreams true
  }
}
